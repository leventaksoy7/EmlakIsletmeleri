// <auto-generated />
using System;
using DAL.Concrete.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(EfContext))]
    partial class EfContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EL.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkplaceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("WorkplaceID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EL.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AreaSquareMeters")
                        .HasColumnType("float");

                    b.Property<int>("BuildingFloors")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("HeatingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("IsForRent")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IsForSale")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ListedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SaleSoldDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantCustomerId")
                        .HasColumnType("int");

                    b.Property<int>("WorkplaceID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TenantCustomerId");

                    b.HasIndex("WorkplaceID");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("EL.PropertySale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("BuyerCustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("RealEstateAgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SellerCustomerId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BuyerCustomerId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RealEstateAgentId");

                    b.HasIndex("SellerCustomerId");

                    b.ToTable("PropertySales");
                });

            modelBuilder.Entity("EL.RealEstateAgentSales", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("PropertySaleId")
                        .HasColumnType("int");

                    b.Property<int>("RealEstateAgentId")
                        .HasColumnType("int");

                    b.Property<decimal>("SaleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PropertySaleId");

                    b.HasIndex("RealEstateAgentId");

                    b.ToTable("RealEstateAgentSales");
                });

            modelBuilder.Entity("EL.Workplace", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizedPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Workplaces");
                });

            modelBuilder.Entity("EL.Customer", b =>
                {
                    b.HasOne("EL.Workplace", "Workplace")
                        .WithMany("Customers")
                        .HasForeignKey("WorkplaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workplace");
                });

            modelBuilder.Entity("EL.Property", b =>
                {
                    b.HasOne("EL.Customer", "Owner")
                        .WithMany("OwnedProperties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EL.Customer", "TenantCustomer")
                        .WithMany("RentedProperties")
                        .HasForeignKey("TenantCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EL.Workplace", "Workplace")
                        .WithMany("Properties")
                        .HasForeignKey("WorkplaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("TenantCustomer");

                    b.Navigation("Workplace");
                });

            modelBuilder.Entity("EL.PropertySale", b =>
                {
                    b.HasOne("EL.Customer", "BuyerCustomer")
                        .WithMany("SalesAsBuyer")
                        .HasForeignKey("BuyerCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EL.Property", "Property")
                        .WithMany("PropertySales")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EL.Workplace", "RealEstateAgent")
                        .WithMany("Sales")
                        .HasForeignKey("RealEstateAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EL.Customer", "SellerCustomer")
                        .WithMany("SalesAsSeller")
                        .HasForeignKey("SellerCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BuyerCustomer");

                    b.Navigation("Property");

                    b.Navigation("RealEstateAgent");

                    b.Navigation("SellerCustomer");
                });

            modelBuilder.Entity("EL.RealEstateAgentSales", b =>
                {
                    b.HasOne("EL.PropertySale", "PropertySale")
                        .WithMany()
                        .HasForeignKey("PropertySaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EL.Workplace", "RealEstateAgent")
                        .WithMany()
                        .HasForeignKey("RealEstateAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PropertySale");

                    b.Navigation("RealEstateAgent");
                });

            modelBuilder.Entity("EL.Customer", b =>
                {
                    b.Navigation("OwnedProperties");

                    b.Navigation("RentedProperties");

                    b.Navigation("SalesAsBuyer");

                    b.Navigation("SalesAsSeller");
                });

            modelBuilder.Entity("EL.Property", b =>
                {
                    b.Navigation("PropertySales");
                });

            modelBuilder.Entity("EL.Workplace", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Properties");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
